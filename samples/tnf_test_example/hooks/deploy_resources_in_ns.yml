---
# If the namespace is already present, the existing object will be patched if its attributes
# differ from those specified using resource_definition or src, according to Ansible docs.
# Using security labels adapted to OCP >=4.12 requirements.
- name: Create namespace
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ app_ns }}"
        labels:
          security.openshift.io/scc.podSecurityLabelSync: "false"
          pod-security.kubernetes.io/enforce: baseline
          pod-security.kubernetes.io/enforce-version: latest

# It was done in configure_aspenmesh_for_ns.yml before, but now moved here so that
# the RoleBinding is applied by default to all pods, as there is a new security
# context unit test in certsuite validating this.
- name: Create ServiceAccount for test pods
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: test
        namespace: "{{ app_ns }}"

- name: Adding restricted-cat-1 policy to a Role
  kubernetes.core.k8s:
    state: present
    definition:
      kind: Role
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: use-restricted-cat-1
        namespace: "{{ app_ns }}"
      rules:
        - apiGroups: ["security.openshift.io"]
          resources: ["securitycontextconstraints"]
          resourceNames: ["restricted-cat-1"]
          verbs: ["use"]

- name: Create RoleBinding for restricted-cat-1 applications
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: use-restricted-cat-1
        namespace: "{{ app_ns }}"
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: use-restricted-cat-1
      subjects:
        - kind: Group
          name: system:serviceaccounts:{{ app_ns }}

- name: Create NetworkPolicies for the pods deployed to deny traffic by default
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'templates/network_policies_deny_traffic.yml.j2') | from_yaml }}"

- name: Configure Aspenmesh for namespace
  include_tasks: configure_aspenmesh_for_ns.yml
  when:
    - tnf_enable_service_mesh | default(false) | bool
    - am_installed | default(false) | bool

- name: Create ResourceQuotas for namespace
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'templates/resource_quota.yml.j2') | from_yaml }}"

- name: Create storage-related resources
  include_tasks: create_storage_resources.yml
  loop:
    - "{{ app_ns }}-test-0"
    - "{{ app_ns }}-test-1"
  loop_control:
    loop_var: volume_name_suffix
  when: app_ns == 'production-cnf'

# In test-cnf namespace, a Deployment will be used.
# In production-cnf namespace, a StatefulSet will be used.
- name: Create two replicated testing pods
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'templates/test_pods.yml.j2') | from_yaml }}"

- name: Wait until all test pods are running
  kubernetes.core.k8s_info:
    namespace: "{{ app_ns }}"
    kind: Pod
    label_selectors:
      - app=test
  register: test_result
  retries: 60
  delay: 5
  until:
    - test_result.resources is defined
    - "test_result.resources|length == 2"
    - "'status' in test_result.resources[0]"
    - "'phase' in test_result.resources[0].status"
    - "test_result.resources[0].status.phase == 'Running'"
    - "'status' in test_result.resources[1]"
    - "'phase' in test_result.resources[1].status"
    - "test_result.resources[1].status.phase == 'Running'"

- name: Wait until PVCs move to Bound status
  kubernetes.core.k8s_info:
    namespace: "{{ app_ns }}"
    kind: PersistentVolumeClaim
  register: pvc_check
  retries: 6
  delay: 10
  until:
    - pvc_check.resources is defined
    - "pvc_check.resources|length == 2"
    - "'status' in pvc_check.resources[0]"
    - "'phase' in pvc_check.resources[0].status"
    - "pvc_check.resources[0].status.phase == 'Bound'"
    - "'status' in pvc_check.resources[1]"
    - "'phase' in pvc_check.resources[1].status"
    - "pvc_check.resources[1].status.phase == 'Bound'"
  when: app_ns == 'production-cnf'

- name: (With Aspenmesh installed) Check if istio-proxy sidecar container is present in test pod
  block:
    - name: (With Aspenmesh installed) Fail if istio-proxy sidecar container is not found
      vars:
        query_containers_name: "spec.containers[*].name"
        query_results: "{{ test_pod | json_query(query_containers_name) | flatten }}"
      fail:
        msg: "istio-proxy sidecar not found in pod"
      when:
        - "not('istio-proxy' in query_results)"
      loop: "{{ test_result.resources }}"
      loop_control:
        loop_var: test_pod
  when:
    - tnf_enable_service_mesh | default(false) | bool
    - am_installed | default(false) | bool

- name: Create CRD under test
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'templates/test_crd.yml.j2') | from_yaml }}"
  when: pods_in_same_ns.target_crds|length
  loop: "{{ pods_in_same_ns.target_crds }}"
  loop_control:
    loop_var: target_crd

- name: Create PodDisruptionBudget for the pods deployed
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'templates/pod_disruption_budget.yml.j2') | from_yaml }}"
