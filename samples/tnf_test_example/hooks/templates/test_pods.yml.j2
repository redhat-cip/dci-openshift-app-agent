apiVersion: apps/v1
{% if app_ns == 'test-cnf' %}
kind: Deployment
{% elif app_ns == 'production-cnf' %}
kind: StatefulSet
{% endif %}
metadata:
  name: test
  namespace: {{ app_ns }}
{% if app_ns == 'production-cnf' %}
  labels:
    AffinityRequired: "true"
{% endif %}
spec:
  replicas: 2
  selector:
    matchLabels:
      app: test
  template:
    metadata:
      labels:
        app: test
{% if app_ns == 'production-cnf' %}
        AffinityRequired: "true"
{% endif %}
{% if targetpodlabels|length %}
{% for label in targetpodlabels %}
        {{ label|regex_replace('=', ': ') }}
{% endfor %}
{% if exclude_connectivity_regexp|length and ( "test" | regex_search(exclude_connectivity_regexp) ) %}
        redhat-best-practices-for-k8s.com/skip_connectivity_tests: 'true'
        redhat-best-practices-for-k8s.com/skip_multus_connectivity_tests: 'true'
{% endif %}
{% endif %}
      annotations:
        redhat-best-practices-for-k8s.com/container_tests: '["PRIVILEGED_POD","PRIVILEGED_ROLE"]' # optional
        redhat-best-practices-for-k8s.com/defaultnetworkinterface: '"eth0"' # optional
{% if app_ns == 'production-cnf' %}
        cpu-load-balancing.crio.io: disable
        irq-load-balancing.crio.io: disable
{% endif %}
      name: test
    spec:
      serviceAccountName: test
      terminationGracePeriodSeconds: 30
      automountServiceAccountToken: false
{% if app_ns == 'production-cnf' %}
      runtimeClassName: production-runtime-class
{% endif %}
{% if tnf_enable_service_mesh|default(false)|bool and am_installed|default(false)| bool %}
      imagePullSecrets:
      - name: aspen-mesh-pull-secret
{% endif %}
      containers:
        - image: {{ tnf_app_image | default('quay.io/redhat-best-practices-for-k8s/certsuite-sample-workload:latest') }}
          imagePullPolicy: IfNotPresent
          name: test
          ports:
            - name: "http-probe"
              containerPort: 8080
          resources:
{% if app_ns == 'production-cnf' %}
            requests:
              memory: 512Mi
              cpu: 2000m
            limits:
{% if tnf_enable_hugepages | default(false) | bool %}
              hugepages-2Mi: 100Mi
{% endif %}
              memory: 512Mi
              cpu: 2000m
{% else %}
            requests:
              memory: 256Mi
              cpu: 0.10
            limits:
{% if tnf_enable_hugepages | default(false) | bool %}
              hugepages-2Mi: 100Mi
{% endif %}
              memory: 512Mi
              cpu: 0.25
{% endif %}
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", "echo Hello from the postStart handler"]
            preStop:
              exec:
                command: ["/bin/sh", "-c", "killall -0 tail"]
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
              httpHeaders:
                - name: health-check
                  value: liveness
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
              httpHeaders:
                - name: health-check
                  value: readiness
            initialDelaySeconds: 10
            periodSeconds: 5
          startupProbe:
            httpGet:
              path: /health
              port: 8080
              httpHeaders:
                - name: health-check
                  value: startup
            failureThreshold: 10
            periodSeconds: 5
          command: ["./bin/app"]
          terminationMessagePolicy: FallbackToLogsOnError
{% if app_ns == 'production-cnf' or tnf_enable_hugepages | default(false) | bool %}
          volumeMounts:
{% endif %}
{% if app_ns == 'production-cnf' %}
          - mountPath: /data
            name: volume-claim-{{ app_ns }}
{% endif %}
{% if tnf_enable_hugepages | default(false) | bool %}
          - mountPath: /hugepages-2Mi
            name: hugepage-2mi
      volumes:
        - name: hugepage-2mi
          emptyDir:
            medium: HugePages-2Mi
{% endif %}
      affinity:
{% if app_ns == 'production-cnf' %}
        podAffinity:
{% else %}
        podAntiAffinity:
{% endif %}
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - test
              topologyKey: "kubernetes.io/hostname"
{% if app_ns == 'production-cnf' %}
  volumeClaimTemplates:
  - metadata:
      name: volume-claim-{{ app_ns }}
      namespace: {{ app_ns }}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
      storageClassName: {{ storage_class is defined | ternary(storage_class, 'local-storage') }}
{% endif %}
