---
# to be used with production-cnf pods
- name: Create custom RuntimeClass
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: node.k8s.io/v1
      kind: RuntimeClass
      metadata:
        name: production-runtime-class
      handler: runc

# Create local-storage StorageClass is no StorageClass is present in the cluster
- name: Create local-storage StorageClass
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: local-storage
      provisioner: kubernetes.io/no-provisioner
      volumeBindingMode: WaitForFirstConsumer
  when: storage_class is not defined

# Check if Aspenmesh is currently deployed to check if we can use service-mesh capabilities in
# the pods under test.
- name: Check Aspenmesh resources
  include_tasks: check_aspenmesh.yml
  when: tnf_enable_service_mesh | default(false) | bool

# Obtained from Verizon VCP Webscale Core and Edge Cloud Native Network Function Requirements, v1.4.
# Note that this SCC seems to be incompatible with the execution of this test suite:
# https://github.com/redhat-best-practices-for-k8s/certsuite/blob/main/CATALOG.md#sys-ptrace-capability
# So sys-ptrace-capability will not be checked in this example.
# Configuration example for enabling SYS_PTRACE:
# https://github.com/redhat-best-practices-for-k8s/certsuite-sample-workload/blob/main/examples/accesscontrol/sysptrace_pass.yaml
- name: Create SCC Category 1 - CNFs that do not require advanced networking features
  community.kubernetes.k8s:
    state: present
    definition:
      kind: SecurityContextConstraints
      apiVersion: security.openshift.io/v1
      metadata:
        name: restricted-cat-1
      users: []
      groups: []
      priority: null
      allowHostDirVolumePlugin: false
      allowHostIPC: false
      allowHostNetwork: false
      allowHostPID: false
      allowHostPorts: false
      allowPrivilegeEscalation: true
      allowPrivilegedContainer: false
      allowedCapabilities: null
      defaultAddCapabilities: null
      requiredDropCapabilities:
        - KILL
        - MKNOD
        - SETUID
        - SETGID
      fsGroup:
        type: MustRunAs
      readOnlyRootFilesystem: false
      runAsUser:
        type: MustRunAsRange
      seLinuxContext:
        type: MustRunAs
      supplementalGroups:
        type: RunAsAny
      volumes:
        - configMap
        - downwardAPI
        - emptyDir
        - persistentVolumeClaim
        - projected
        - secret

# exclude_connectivity_regexp is not checked because it is optional.
- name: Create namespaces and deploy test resources on each namespace if not done before
  include_tasks: deploy_resources_in_ns.yml
  vars:
    app_ns: "{{ pods_in_same_ns.namespace }}"
    targetpodlabels: "{{ pods_in_same_ns.targetpodlabels }}"
    target_crds: "{{ pods_in_same_ns.target_crds }}"
    exclude_connectivity_regexp: "{{ pods_in_same_ns.exclude_connectivity_regexp|default('') }}"
  when:
    - kbpc_test_config | default('') | length
    - pods_in_same_ns.namespace | default('') | length
    - pods_in_same_ns.targetpodlabels | default('') is iterable
    - pods_in_same_ns.target_crds | default('') is iterable
  loop: "{{ kbpc_test_config }}"
  loop_control:
    loop_var: pods_in_same_ns

- name: Create NetworkPolicies for the pods deployed to allow inter-intra namespaces traffic
  community.kubernetes.k8s:
    state: present
    definition: "{{ lookup('template', 'templates/network_policies_allow_traffic.yml.j2') | from_yaml }}"
  when:
    - kbpc_test_config | default('') |length

# Install the Helm chart and the operator in test-cnf namespace
- name: Set target_ns variable
  set_fact:
    target_ns: "{{ kbpc_test_config[0].namespace|default('test-cnf') }}"

- name: Deploy operator
  include_tasks: deploy_operator.yml
  when:
    - tnf_install_operator | default(true) | bool
    - tnf_operator_to_install is defined

- name: Deploy Helm chart
  include_tasks: deploy_helm_chart.yml
  when:
    - tnf_helm_chart_to_install is defined

- name: Patch services created by operator and Helm chart
  block:
    - name: Get services deployed by operator and Helm chart
      community.kubernetes.k8s_info:
        kind: Service
        namespace: "{{ target_ns }}"
      register: created_services

    # If cluster is dual-stack, services will automatically receive an IPv6 IP address
    # under spec.clusterIPs.
    - name: Patch services to set them up as PreferDualStack ipFamilyPolicy
      community.kubernetes.k8s:
        kind: Service
        name: "{{ service.metadata.name }}"
        namespace: "{{ target_ns }}"
        state: present
        definition:
          spec:
            ipFamilyPolicy: "PreferDualStack"
      loop: "{{ created_services.resources }}"
      loop_control:
        loop_var: service
  when:
    - tnf_operator_to_install is defined
    - tnf_helm_chart_to_install is defined

...
