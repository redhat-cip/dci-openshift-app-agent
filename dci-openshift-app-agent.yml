---

# Step 0a : set kubeconfig_path, OCP version vars and dci_topic. Check hooks
- name: "Execute kubeconfig step"
  hosts: jumphost
  tags:
    - kubeconfig
  tasks:
    - block:
        - name: Display proxy settings
          debug:
            msg: "http_proxy={{ lookup('env','http_proxy') }} https_proxy={{ lookup('env','https_proxy') }} no_proxy={{ lookup('env','no_proxy') }}"

        - name: Check kubeconfig
          include_tasks: 'plays/check_kubeconfig.yml'

        # Check prerequisite
        - name: "Check prerequisite"
          include_tasks: 'plays/check_prerequisite.yml'

      rescue: &error_with_upload_logs
        - name: "Run common logging process"
          include_tasks: plays/common_logging.yml

        - name: "Execute the teardown process"
          include_tasks: "{{ dci_config_dir }}/hooks/teardown.yml"
          when:
            - dci_teardown_on_failure
            - check_teardown.stat.exists

        - name: "Run the teardown play"
          include_tasks: plays/teardown.yml
          when:
            - dci_teardown_on_failure

        - name: "Execute the error process"
          include_tasks: plays/error.yml

        # The error may happen before creating the job_info variable, or it may happen in a
        # job where dci tag is not enabled (so job_info variable is not created). Then,
        # we have to set a different error message in that case
        - name: Fail properly
          fail:
            msg: "Error: Something went wrong"
          when: job_info is not defined

        # Use dci tag to avoid problems with job_info.job.id, which would not be defined
        # if dci tag is not enabled
        - name: Fail properly
          fail:
            msg: "Error: Something went wrong, review the log at: https://www.distributed-ci.io/jobs/{{ job_info.job.id }}/jobStates"
          tags: [dci]

# Step 0b : initial step
- name: "Execute initial step"
  hosts: jumphost
  gather_facts: false
  tags:
    - job
    - dci
  tasks:
    - name: Read credentials from env vars
      set_fact:
        dci_client_id="{{ lookup('env','DCI_CLIENT_ID') }}"
        dci_api_secret="{{ lookup('env','DCI_API_SECRET') }}"
        dci_cs_url="{{ lookup('env','DCI_CS_URL') }}"
        dci_ui_url="{{ lookup('env','DCI_UI_URL') | default('https://www.distributed-ci.io', True) }}"
      no_log: true

    - name: Check job topic
      assert:
        that:
          - "dci_topic == job_info.job.topic.name"
        fail_msg: "dci_topic is inconsistent: {{ dci_topic }} != {{ job_info.job.topic.name }}. Use dci-pipeline-schedule to schedule jobs."
        success_msg: "dci_topic is consistent"
      when:
        - dci_topic is defined
        - job_info is defined

    # Add the ocp component when called from dci-pipeline
    - name: Attach ocp component to the job
      dci_job_component:
        job_id: "{{ job_info.job.id }}"
        component_id: "{{ ocp_component_id }}"
      register: job_component_result
      until: job_component_result is not failed
      retries: 5
      delay: 20
      when:
        - job_info is defined
        - ocp_component_id is defined

    # Schedule a new job only if not passed via dci-pipeline
    - name: "Schedule a new job"
      dci_job:
        components: "{{ dci_components + [ocp_component_id] | default([ocp_component_id]) }}"
        components_by_query: "{{ dci_components_by_query | default([]) }}"
        topic: "{{ dci_topic }}"
        comment: "{{ dci_comment }}"
        url: "{{ dci_url }}"
        name: "{{ dci_name }}"
        configuration: "{{ dci_configuration }}"
        previous_job_id: "{{ dci_previous_job_id }}"
        team_id: "{{ dci_team_id }}"
        pipeline_id: "{{ dci_pipeline_id }}"
      register: job_info
      when: job_info is not defined

    - name: Set job id
      set_fact:
        job_id: "{{ job_info.job.id }}"

    - name: Copy the job_id to the JOB_ID_FILE if it exists
      copy:
        content: "{{ job_id }}"
        dest: "{{ JOB_ID_FILE }}"
        mode: '0644'
      when: JOB_ID_FILE is defined

    - name: Set previous job id
      set_fact:
        dci_previous_job_id: "{{ job_info.job.previous_job_id }}"
      when:
        - 'dci_previous_job_id is not defined'
        - 'job_info.job.previous_job_id != None'
        - 'job_info.job.previous_job_id | length > 0'

    - name: 'Set DCI tags for the current job'
      dci_job:
        id: '{{ job_id }}'
        tags: '{{ ["agent:openshift-app"] + dci_tags + dci_workarounds }}'

    - name: Count workarounds
      dci_job:
        id: "{{ job_id }}"
        key: "workarounds"
        value: "{{ dci_workarounds | length }}"

    - name: Add cluster tag to the current job
      dci_job:
        id: '{{ job_id }}'
        tags:
          - cluster:{{ cluster_name }}
      when: cluster_name is defined

    - name: "Merge pull secrets"
      include_tasks: 'plays/pullsecrets.yml'
      when: dci_disconnected | default(false) | bool

    # Keep in sync with test-runner parsing from d-o-a
    - name: UI URL
      debug:
        msg: 'Follow the log at: {{ dci_ui_url }}/jobs/{{ job_id }}/jobStates' # noqa 204

# Step 1a : Red Hat "pre-run" step
- name: "Execute Red Hat pre-run step"
  hosts: jumphost
  tags:
    - pre-run
    - redhat-pre-run
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  tasks:
    - block:

        - name: "Setup job_logs directory"
          include_tasks: plays/log-dir.yml
          when: job_logs is undefined

        - name: "Execute pre-run"
          include_tasks: 'plays/pre-run.yml'

      rescue: *error_with_upload_logs

# Step 1b : Hook "pre-run" step
- name: "Execute hooks' pre-run step"
  hosts: jumphost
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  tags:
    - pre-run
    - partner-pre-run
  tasks:
    - block:

        - name: "Setup job_logs directory"
          include_tasks: plays/log-dir.yml
          when: job_logs is undefined

        - name: Run the pre-run hook
          include_tasks: '{{ dci_config_dir }}/hooks/pre-run.yml'
          when: check_pre_run.stat.exists

      rescue: *error_with_upload_logs

# Step 2 : "running" step
- name: "Execute install step"
  hosts: jumphost
  tags:
    - install
    - running
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  tasks:
    - block:
        - name: Set job state - running
          dci_job:
            id: "{{ job_id }}"
            status: "running"
          tags: [dci]

        - name: "Execute install play"
          include_tasks: 'plays/install.yml'

        - name: "Execute install hook"
          include_tasks: "{{ dci_config_dir }}/hooks/install.yml"

        - name: "Execute post-install play"
          include_tasks: 'plays/post-install.yml'

      rescue: &failure_with_upload_logs
        - name: "Run common logging process"
          include_tasks: plays/common_logging.yml

        - name: "Execute the teardown process"
          include_tasks: "{{ dci_config_dir }}/hooks/teardown.yml"
          when:
            - dci_teardown_on_failure
            - check_teardown.stat.exists

        - name: "Run the teardown play"
          include_tasks: plays/teardown.yml
          when:
            - dci_teardown_on_failure

        - name: "Execute the failure process"
          include_tasks: plays/failure.yml

        # The error may happen before creating the job_info variable, or it may happen in a
        # job where dci tag is not enabled (so job_info variable is not created). Then,
        # we have to set a different error message in that case
        - name: Fail properly
          fail:
            msg: "Failure: Something went wrong"
          when: job_info is not defined

        # Use dci tag to avoid problems with job_info.job.id, which would not be defined
        # if dci tag is not enabled
        - name: Fail properly
          fail:
            msg: "Failure: Something went wrong, review the log at: https://www.distributed-ci.io/jobs/{{ job_info.job.id }}/jobStates"
          tags: [dci]

# Step 3a : "testing" step
- name: "Execute Red Hat tests step"
  hosts: jumphost
  tags:
    - running
    - testing
    - redhat-testing
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  tasks:
    - block:

        - name: "Setup job_logs directory"
          include_tasks: plays/log-dir.yml
          when: job_logs is undefined

        - name: "Execute Red Hat tests"
          include_tasks: plays/tests.yml

      rescue: *failure_with_upload_logs

# Step 3b : "testing" step
- name: "Execute partner tests step"
  hosts: jumphost
  tags:
    - running
    - testing
    - partner-testing
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  tasks:
    - block:

        - name: "Setup job_logs directory"
          include_tasks: plays/log-dir.yml
          when: job_logs is undefined

        - name: "Execute tests hook"
          include_tasks: "{{ dci_config_dir }}/hooks/tests.yml"
          when: check_tests.stat.exists

      rescue: *failure_with_upload_logs

# Step 3c : "testing" step
- name: "Check test results step"
  hosts: jumphost
  tags:
    - running
    - testing
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  tasks:
    - block:

        - name: "Check test results"
          include_tasks: plays/check-test-results.yml

      rescue: *failure_with_upload_logs

# Step 4 : "post-run" step
- name: "Execute post-run step"
  hosts: jumphost
  tags:
    - post-run
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  tasks:
    - block:
        - name: Run the post-run hook
          include_tasks: '{{ dci_config_dir }}/hooks/post-run.yml'
          when: check_post_run.stat.exists

        - name: "Run post-run"
          include_tasks: plays/post-run.yml

      rescue: *error_with_upload_logs

# Step 5: "Final step (success)"
- name: "Success"
  hosts: jumphost
  tags:
    - success
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  tasks:
    - name: "Run common logging process"
      include_tasks: plays/common_logging.yml

    - name: "Execute the teardown process"
      include_tasks: "{{ dci_config_dir }}/hooks/teardown.yml"
      when:
        - dci_teardown_on_success
        - check_teardown.stat.exists

    - name: "Run the teardown play"
      include_tasks: plays/teardown.yml
      when:
        - dci_teardown_on_success

    - name: success
      dci_job:
        id: "{{ job_id }}"
        status: "success"
      tags: [dci]

    - name: "Final step"
      debug:
        msg: "The job is now finished. Review the log at: https://www.distributed-ci.io/jobs/{{ job_info.job.id }}/jobStates"
      tags: [dci]
...
