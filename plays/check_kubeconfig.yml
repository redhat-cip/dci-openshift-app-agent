---
# Check if KUBECONFIG is present

- name: "Read KUBECONFIG path from env vars"
  ansible.builtin.set_fact:
    kubeconfig_path: "{{ lookup('env', 'KUBECONFIG') }}"
  when: kubeconfig_path is not defined

- name: "Check if KUBECONFIG exists"
  ansible.builtin.stat:
    path: "{{ kubeconfig_path }}"
  delegate_to: localhost
  register: kubeconfig

- name: "Fail if kubeconfig NOT found"
  ansible.builtin.fail:
    msg: "kubeconfig not found at {{ kubeconfig_path }}"
  when: not kubeconfig.stat.exists

- name: "Copy kubeconfig and inputs in jumphost"
  ignore_errors: true
  block:
    - name: "Create input directory"
      ansible.builtin.file:
        path: "{{ kubeconfig_path | dirname }}"
        state: directory
        recurse: true
    - name: "Copy kubeconfig and inputs"
      ansible.builtin.copy:
        src: "{{ kubeconfig_path | dirname }}/"
        dest: "{{ kubeconfig_path | dirname }}"
        mode: "0644"

- name: "Ensure tmp directory existes"
  ansible.builtin.file:
    state: directory
    path: "{{ ansible_env.HOME }}/tmp"
    mode: "0755"

- name: "Temp directory for stable clients"
  ansible.builtin.tempfile:
    state: directory
    prefix: dci_app_agent.
  register: client_tmp_dir

- name: "Download stable clients"
  vars:
    _opm_prefix: "{{ ansible_distribution_major_version is version('9', '==') | ternary('-rhel9', '') }}"
  ansible.builtin.unarchive:
    src: "{{ item }}"
    dest: "{{ client_tmp_dir.path }}"
    remote_src: true
    mode: "0755"
  loop:
    - "{{ ocp_clients_url }}/stable/opm-linux{{ _opm_prefix }}.tar.gz"
    - "{{ ocp_clients_url }}/stable/openshift-client-linux-amd64-rhel{{ ansible_distribution_major_version }}.tar.gz"

- name: "Set client paths"
  ansible.builtin.set_fact:
    oc_tool_path: "{{ client_tmp_dir.path }}/oc"
    opm_tool_path: "{{ client_tmp_dir.path }}/opm-rhel{{ ansible_distribution_major_version }}"

- name: "Get cluster version"
  community.kubernetes.k8s_info:
    api: config.openshift.io/v1
    kind: ClusterVersion
    name: version
    kubeconfig: "{{ kubeconfig_path }}"
  register: cluster_version

- name: Get Console resource
  community.kubernetes.k8s_info:
    api_version: config.openshift.io/v1
    kind: Console
    name: cluster
    kubeconfig: "{{ kubeconfig_path }}"
  register: console_info

- name: "Set OCP name and version facts"
  vars:
    current_ver_query: "history[?state=='Completed'] | [0].version"
    current_img_query: "history[?state=='Completed'] | [0].image"
    full_ver: "{{ cluster_version.resources[0].status | json_query(current_ver_query) }}"
    current_ver: "{{ full_ver.split('-')[0] }}"
    cluster_console: "{{ console_info.resources[0].status.consoleURL | default('', true) |
                      regex_replace('^https?://', '') }}"
    cluster_name: "{{ (cluster_console | regex_search('\\.apps\\.([^\\.]+)\\.', '\\1'))[0] |
                   default('cluster', true) }}"
  ansible.builtin.set_fact:
    cluster_name: "{{ cluster_name }}"
    cluster_domain: "{{ cluster_console | regex_replace('^.*\\.apps\\.' + cluster_name + '\\.', '') |
                     default('local', true) }}"
    ocp_version_full: "{{ full_ver }}"
    ocp_version: "{{ current_ver.split('.')[0:2] | join('.') }}"
    ocp_version_maj: "{{ current_ver.split('.')[0] }}"
    ocp_version_min: "{{ current_ver.split('.')[1] }}"
    ocp_version_patch: "{{ current_ver.split('.')[2] }}"
    ocp_image: "{{ cluster_version.resources[0].status | json_query(current_img_query) }}"
  when:
    - cluster_version | length

- name: "Fail if the ocp version is not set"
  ansible.builtin.fail:
    msg: "OCP version is not set"
  when: not ocp_version

- name: "Set dci_topic"
  ansible.builtin.set_fact:
    dci_topic: "OCP-{{ ocp_version }}"

# get ocp component

- name: Find the corresponding ocp topic
  dci_topic:
    state: search
    name: "{{ dci_topic }}"
  delegate_to: localhost
  register: dci_topics
  tags: [dci]

- name: Find the corresponding ocp components
  dci_component:
    topic_id: "{{ dci_topics.topics[0].id }}"
    type: ocp
    state: search
    tags: "sha256:{{ ocp_image.split('sha256:')[1] }}"
    sort: "-released_at"
  when:
    - "dci_topics is defined"
    - "dci_topics.topics|length >= 1"
  delegate_to: localhost
  register: ocp_components
  tags: [dci]

- name: Find the corresponding ocp components by version
  dci_component:
    topic_id: "{{ dci_topics.topics[0].id }}"
    type: ocp
    state: search
    version: "{{ ocp_version_full }}"
    sort: "-released_at"
  when:
    - "dci_topics is defined"
    - "dci_topics.topics|length >= 1"
    - "'components' not in ocp_components or ocp_components.components|length == 0 or 'id' not in ocp_components.components[0]"
  delegate_to: localhost
  register: ocp_components_by_version
  tags: [dci]

- name: Set ocp_component_id
  ansible.builtin.set_fact:
    ocp_component_id: "{{ ocp_components.components[0].id }}"
  when:
    - "ocp_components is defined"
    - "'components' in ocp_components"
    - "ocp_components.components|length >= 1"
    - "'id' in ocp_components.components[0]"
  delegate_to: localhost
  tags: [dci]

- name: Set ocp_component_id from version
  ansible.builtin.set_fact:
    ocp_component_id: "{{ ocp_components_by_version.components[0].id }}"
  when:
    - "ocp_components_by_version is defined"
    - "'components' in ocp_components_by_version"
    - "ocp_components_by_version.components|length >= 1"
    - "'id' in ocp_components_by_version.components[0]"
  delegate_to: localhost
  tags: [dci]

- name: Display ocp_component_id
  ansible.builtin.debug:
    msg: "{{ ocp_component_id }}"
  when: ocp_component_id is defined

...
