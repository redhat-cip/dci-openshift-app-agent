---
# TODOs:
# - Define a better tmp file for users.htpasswd OR
#   evaluate how feasible is to use dci_cluster_configs_dir/users.htpasswd
#   (may not be good idea if multiple users could be created in the cluster at the same time)
# - Define a user name dynamically?
# - Use a proper location for <user>_kubeconfig
# - Find a way to rename the cluster in <user>_kubeconfig once created as it uses the <server> by default

- name: "Extract cluster name and server"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  shell: >
    oc config view -o jsonpath="{.clusters[0].cluster.server}"
  register: server

- name: "Extract htpasswd secret"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  shell: >
    oc --namespace openshift-config \
      get secret htpass-secret \
      -o jsonpath='{.data.htpasswd}' |
    base64 -d > /tmp/users.htpasswd

- name: "Add new user creds to htpasswd secret"
  shell: >
    htpasswd -bB /tmp/users.htpasswd {{ item.name }} {{ item.password }}
  loop: "{{ users }}"
  when: users is defined

- name: "Update htpasswd secret"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  shell: >
    set -o pipefail;
    oc create secret generic htpass-secret \
      --from-file=htpasswd=/tmp/users.htpasswd \
      --namespace openshift-config \
      --dry-run=client --output yaml |
    oc apply -f -

- name: "Give admin role to the users"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  shell: >
    oc adm policy add-role-to-user admin {{ item.name }} -n {{ item.namespace }}
  loop: "{{ users }}"
  when: users is defined

- name: Login with each user to create their own user_kubeconfig file
  environment:
    KUBECONFIG: "/tmp/{{ item.name }}_kubeconfig"
  shell: >
    oc login --insecure-skip-tls-verify=true -u {{ item.name }} -p {{ item.password }} -n {{ item.namespace }} {{ server.stdout }}
  retries: 10
  delay: 10
  register: result
  until: result.rc == 0
  loop: "{{ users }}"

...
