#!/bin/bash
#
# Copyright (C) 2021-2023 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

# Description: A shell script that collects logs from an OCP cluster
# It requires access to the a valid KUBECONFIG env variable and a log directory

set -x

oc_path=$(which oc)

function usage(){
  printf "Usage: %s <log_dir>\n" "$(basename "$0")"
  printf "A log directory is required.\n"
}

if [[ $# != 1 ]]; then
  printf "Error: missing log directory argument.\n" >&2
  usage
  exit 1
fi

log_dir="${1}"

# Get the output of various oc commands
${oc_path} version > "${log_dir}/version.txt"
${oc_path} get clusterversion/version > "${log_dir}/clusterversion.txt"
${oc_path} get clusteroperator > "${log_dir}/clusteroperator.txt"
${oc_path} get subs -A -o json | jq '[.items[] | {operator_name: .spec.name, version: .status.currentCSV, catalog: .spec.source }]' > "${log_dir}/operators.json"
${oc_path} get network cluster -o yaml > "${log_dir}/clusternetwork.yaml"
${oc_path} get nodes -o wide > "${log_dir}/nodes.txt"
${oc_path} get nodes -o yaml > "${log_dir}/all-nodes.yaml"
${oc_path} get pods --all-namespaces -o wide > "${log_dir}/pods.txt"

# Get events with created object time
${oc_path} get events --all-namespaces --sort-by='.metadata.creationTimestamp' -o json |
  jq -r '
    "NAMESPACE\tCREATED\tLAST SEEN\tTYPE\tREASON\tOBJECT\tMESSAGE",
    (.items[] | [
      (.involvedObject.namespace | tostring),
      (.metadata.creationTimestamp | tostring),
      (.lastTimestamp | tostring),
      (.type | tostring),
      (.reason | tostring),
      ((.involvedObject.kind // "") + "/" + (.involvedObject.name // "")),
      (.message | tostring | gsub("\n"; ";"))
    ] | @tsv)' |
  column -t -s $'\t' \
  > "${log_dir}/events.txt"

if [ "$DO_MUST_GATHER" = true ]; then
  # Get image sources if available
  idms_reg=$(\
      ${oc_path} get imagedigestmirrorsets -o json 2>/dev/null |
        jq -r '.items[0].spec.imageDigestMirrors[0].mirrors[0] // ""'
  )
  icsp_reg=$(\
      ${oc_path} get imagecontentsourcepolicy -o json 2>/dev/null |
        jq -r '.items[0].spec.repositoryDigestMirrors[0].mirrors[0] // ""'
  )
  if [[ -n "${idms_reg}" ]]; then
     registry=${idms_reg/\/*}
  elif [[ -n "${icsp_reg}" ]]; then
     registry=${icsp_reg/\/*}
  fi
  for image in ${DCI_MUST_GATHER_IMAGES:-"registry.redhat.io/openshift4/ose-must-gather"}
  do
    if [ -n "${registry}" ];then
      image="${registry}/${image#*/}"
    fi
    MUST_GATHER_OPTS="${MUST_GATHER_OPTS} --image=${image}"
  done

  must_gather_dir="${log_dir}/must_gather"
  mkdir -p "${must_gather_dir}"

  ${oc_path} adm must-gather \
    --dest-dir="${must_gather_dir}" \
    ${MUST_GATHER_OPTS} \
    >/dev/null

  # Compress must-gather
  tar \
    --use-compress-program='pigz --best --recursive' \
    --directory "${log_dir}" \
    --create \
    --file "${must_gather_dir}.tar.gz" must_gather/

  rm -Rf "${must_gather_dir}"
fi
