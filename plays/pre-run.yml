---

- name: Pre-run
  dci_job:
    id: "{{ job_id }}"
    status: "pre-run"
  delegate_to: localhost
  tags: [dci]

- name: Install packages to check workload compatibility with OCP versions
  ansible.builtin.dnf:
    name:
      - python3-semver
      - python3-junit_xml
    state: present
  become: true
  when: check_workload_api | default(true) | bool

- name: Include installed software and git repos as components
  vars:
    mandatory_rpms:
      - ansible
      - dci-openshift-app-agent
      - dci-pipeline
      - podman
      - python3-dciclient
      - python3-kubernetes
      - python3-openshift
    ic_rpms: "{{ (dci_rpms_to_components + mandatory_rpms) | flatten }}"
    ic_gits: "{{ dci_gits_to_components | flatten }}"
    ic_dev_gits: "{{ dev_gits_to_components | flatten }}"
  ansible.builtin.include_role:
    name: redhatci.ocp.include_components
    apply:
      delegate_to: localhost

- name: Get the updated job_info
  dci_job:
    id: "{{ job_id }}"
  delegate_to: localhost
  register: dci_app_agent_job_info

- name: Compute if all needed components are ga
  vars:
    ga_components: "{{ dci_app_agent_job_info.job.components | selectattr('tags', 'issuperset', ['build:ga']) | map(attribute='type') | list }}"
  ansible.builtin.set_fact:
    dci_all_components_are_ga: "{{ dci_ga_components_for_certification | difference(ga_components) | length == 0 }}"

- name: Debug components for the certification
  vars:
    ga_components: "{{ dci_app_agent_job_info.job.components | selectattr('tags', 'issuperset', ['build:ga']) | map(attribute='type') | list }}"
  ansible.builtin.debug:
    msg:
      - "dci_ga_components_for_certification: {{ dci_ga_components_for_certification }}"
      - "job_info_job_components: {{ dci_app_agent_job_info.job.components }}"
      - "ga_components: {{ ga_components }}"
      - "dci_all_components_are_ga: {{ dci_all_components_are_ga }}"

### Mirror must-gather images

- name: Mirror must gather images
  ansible.builtin.include_role:
    name: redhatci.ocp.mirror_images
  vars:
    mi_images: "{{ dci_must_gather_images | default(['registry.redhat.io/openshift4/ose-must-gather']) }}"
    mi_authfile: "{{ pullsecret_tmp_file }}"
    mi_registry: "{{ dci_local_registry }}"
  when:
    - dci_disconnected | default(false) | bool
    - dci_local_registry | length
    - do_must_gather | bool
...
